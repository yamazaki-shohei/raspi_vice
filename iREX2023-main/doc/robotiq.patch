diff --git a/robotiq_2f_140_gripper_visualization/launch/test_2f_140_model.launch b/robotiq_2f_140_gripper_visualization/launch/test_2f_140_model.launch
index 5cb2231..01298ef 100644
--- a/robotiq_2f_140_gripper_visualization/launch/test_2f_140_model.launch
+++ b/robotiq_2f_140_gripper_visualization/launch/test_2f_140_model.launch
@@ -5,6 +5,6 @@
   <param name="robot_description" command="$(find xacro)/xacro $(find robotiq_2f_140_gripper_visualization)/urdf/robotiq_arg2f_140_model.xacro" />
   <param name="use_gui" value="$(arg gui)"/>
   <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
-  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />
+  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
   <node name="rviz" pkg="rviz" type="rviz" args="-d $(find robotiq_2f_140_gripper_visualization)/visualize.rviz" required="true" />
 </launch>
diff --git a/robotiq_2f_gripper_control/nodes/Robotiq2FGripperRtuNode.py b/robotiq_2f_gripper_control/nodes/Robotiq2FGripperRtuNode.py
index 06e71fe..f5a7e07 100755
--- a/robotiq_2f_gripper_control/nodes/Robotiq2FGripperRtuNode.py
+++ b/robotiq_2f_gripper_control/nodes/Robotiq2FGripperRtuNode.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Software License Agreement (BSD License)
 #
@@ -62,7 +62,7 @@ def mainLoop(device):
     rospy.init_node('robotiq2FGripper')
 
     #The Gripper status is published on the topic named 'Robotiq2FGripperRobotInput'
-    pub = rospy.Publisher('Robotiq2FGripperRobotInput', inputMsg.Robotiq2FGripper_robot_input)
+    pub = rospy.Publisher('Robotiq2FGripperRobotInput', inputMsg.Robotiq2FGripper_robot_input, queue_size=10)
 
     #The Gripper command is received from the topic named 'Robotiq2FGripperRobotOutput'
     rospy.Subscriber('Robotiq2FGripperRobotOutput', outputMsg.Robotiq2FGripper_robot_output, gripper.refreshCommand)
diff --git a/robotiq_2f_gripper_control/nodes/Robotiq2FGripperSimpleController.py b/robotiq_2f_gripper_control/nodes/Robotiq2FGripperSimpleController.py
index 3294a0f..881d0d7 100755
--- a/robotiq_2f_gripper_control/nodes/Robotiq2FGripperSimpleController.py
+++ b/robotiq_2f_gripper_control/nodes/Robotiq2FGripperSimpleController.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Software License Agreement (BSD License)
 #
@@ -113,7 +113,7 @@ def askForCommand(command):
     currentCommand += ', rFR = '   + str(command.rFR )
 
 
-    print currentCommand
+    print(currentCommand)
 
     strAskForCommand  = '-----\nAvailable commands\n\n'
     strAskForCommand += 'r: Reset\n'
@@ -128,13 +128,13 @@ def askForCommand(command):
     
     strAskForCommand += '-->'
 
-    return raw_input(strAskForCommand)
+    return input(strAskForCommand)
 
 def publisher():
     """Main loop which requests new commands and publish them on the Robotiq2FGripperRobotOutput topic."""
     rospy.init_node('Robotiq2FGripperSimpleController')
     
-    pub = rospy.Publisher('Robotiq2FGripperRobotOutput', outputMsg.Robotiq2FGripper_robot_output)
+    pub = rospy.Publisher('Robotiq2FGripperRobotOutput', outputMsg.Robotiq2FGripper_robot_output, queue_size=10)
 
     command = outputMsg.Robotiq2FGripper_robot_output();
 
diff --git a/robotiq_2f_gripper_control/nodes/Robotiq2FGripperStatusListener.py b/robotiq_2f_gripper_control/nodes/Robotiq2FGripperStatusListener.py
index 2a8486e..6c6c95d 100755
--- a/robotiq_2f_gripper_control/nodes/Robotiq2FGripperStatusListener.py
+++ b/robotiq_2f_gripper_control/nodes/Robotiq2FGripperStatusListener.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Software License Agreement (BSD License)
 #
@@ -49,7 +49,7 @@ from robotiq_2f_gripper_control.msg import _Robotiq2FGripper_robot_input  as inp
 def printStatus(status):
     """Print the status string generated by the statusInterpreter function."""
 
-    print statusInterpreter(status)
+    print(statusInterpreter(status))
 
 def Robotiq2FGripperStatusListener():
     """Initialize the node and subscribe to the Robotiq2FGripperRobotInput topic."""
diff --git a/robotiq_2f_gripper_control/nodes/Robotiq2FGripperTcpNode.py b/robotiq_2f_gripper_control/nodes/Robotiq2FGripperTcpNode.py
index 01ec1fc..cce210b 100755
--- a/robotiq_2f_gripper_control/nodes/Robotiq2FGripperTcpNode.py
+++ b/robotiq_2f_gripper_control/nodes/Robotiq2FGripperTcpNode.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Software License Agreement (BSD License)
 #
@@ -62,7 +62,7 @@ def mainLoop(address):
     rospy.init_node('robotiq2FGripper')
 
     #The Gripper status is published on the topic named 'Robotiq2FGripperRobotInput'
-    pub = rospy.Publisher('Robotiq2FGripperRobotInput', inputMsg.Robotiq2FGripper_robot_input)
+    pub = rospy.Publisher('Robotiq2FGripperRobotInput', inputMsg.Robotiq2FGripper_robot_input, queue_size=10)
 
     #The Gripper command is received from the topic named 'Robotiq2FGripperRobotOutput'
     rospy.Subscriber('Robotiq2FGripperRobotOutput', outputMsg.Robotiq2FGripper_robot_output, gripper.refreshCommand)
diff --git a/robotiq_2f_gripper_control/src/robotiq_2f_gripper_control/baseRobotiq2FGripper.py b/robotiq_2f_gripper_control/src/robotiq_2f_gripper_control/baseRobotiq2FGripper.py
index 6fd5bed..44afc8b 100644
--- a/robotiq_2f_gripper_control/src/robotiq_2f_gripper_control/baseRobotiq2FGripper.py
+++ b/robotiq_2f_gripper_control/src/robotiq_2f_gripper_control/baseRobotiq2FGripper.py
@@ -54,34 +54,34 @@ class robotiqbaseRobotiq2FGripper:
 
     def verifyCommand(self, command):
         """Function to verify that the value of each variable satisfy its limits."""
-    	   	
-   	#Verify that each variable is in its correct range
-   	command.rACT = max(0, command.rACT)
-   	command.rACT = min(1, command.rACT)
-   	
-   	command.rGTO = max(0, command.rGTO)
-   	command.rGTO = min(1, command.rGTO)
-
-   	command.rATR = max(0, command.rATR)
-   	command.rATR = min(1, command.rATR)
-   	
-   	command.rPR  = max(0,   command.rPR)
-   	command.rPR  = min(255, command.rPR)   	
-
-   	command.rSP  = max(0,   command.rSP)
-   	command.rSP  = min(255, command.rSP)   	
-
-   	command.rFR  = max(0,   command.rFR)
-   	command.rFR  = min(255, command.rFR) 
-   	
-   	#Return the modified command
-   	return command
+
+        #Verify that each variable is in its correct range
+        command.rACT = max(0, command.rACT)
+        command.rACT = min(1, command.rACT)
+
+        command.rGTO = max(0, command.rGTO)
+        command.rGTO = min(1, command.rGTO)
+
+        command.rATR = max(0, command.rATR)
+        command.rATR = min(1, command.rATR)
+
+        command.rPR  = max(0,   command.rPR)
+        command.rPR  = min(255, command.rPR)
+
+        command.rSP  = max(0,   command.rSP)
+        command.rSP  = min(255, command.rSP)
+
+        command.rFR  = max(0,   command.rFR)
+        command.rFR  = min(255, command.rFR)
+
+        #Return the modified command
+        return command
 
     def refreshCommand(self, command):
         """Function to update the command which will be sent during the next sendCommand() call."""
     
-	#Limit the value of each variable
-    	command = self.verifyCommand(command)
+        #Limit the value of each variable
+        command = self.verifyCommand(command)
 
         #Initiate command as an empty list
         self.message = []
@@ -98,6 +98,7 @@ class robotiqbaseRobotiq2FGripper:
     def sendCommand(self):
         """Send the command to the Gripper."""    
         
+        # print(f'baseRobotiq2FGripper-sendCommand : {self.message}')
         self.client.sendCommand(self.message)
 
     def getStatus(self):
@@ -105,9 +106,14 @@ class robotiqbaseRobotiq2FGripper:
 
         #Acquire status from the Gripper
         status = self.client.getStatus(6);
+        # print(f'getStatus(status 1) : {type(status)}\n{status}')
+        # if len(status) <= 0:
+        #   status = [ 0 for i in range(6) ]
+        #   print(f'getStatus(status 2) : {type(status)}\n{status}')
 
         #Message to output
         message = inputMsg.Robotiq2FGripper_robot_input()
+        # print(f'getStatus(message) : {type(message)}\n{message}')
 
         #Assign the values to their respective variables
         message.gACT = (status[0] >> 0) & 0x01;        
diff --git a/robotiq_2f_gripper_control/src/robotiq_2f_gripper_control/robotiq_2f_gripper_ctrl.py b/robotiq_2f_gripper_control/src/robotiq_2f_gripper_control/robotiq_2f_gripper_ctrl.py
index 4c0318e..b1b7123 100755
--- a/robotiq_2f_gripper_control/src/robotiq_2f_gripper_control/robotiq_2f_gripper_ctrl.py
+++ b/robotiq_2f_gripper_control/src/robotiq_2f_gripper_control/robotiq_2f_gripper_ctrl.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 import numpy as np
 
@@ -14,7 +14,7 @@ class RobotiqCGripper(object):
         self.cur_status = None
         self.status_sub = rospy.Subscriber('Robotiq2FGripperRobotInput', inputMsg,
                                            self._status_cb)
-        self.cmd_pub = rospy.Publisher('Robotiq2FGripperRobotOutput', outputMsg)
+        self.cmd_pub = rospy.Publisher('Robotiq2FGripperRobotOutput', outputMsg, queue_size=10)
 
     def _status_cb(self, msg):
         self.cur_status = msg
@@ -166,12 +166,12 @@ def main():
     if gripper.is_reset():
         gripper.reset()
         gripper.activate()
-    print gripper.close(block=True)
+    print(gripper.close(block=True))
     while not rospy.is_shutdown():
-        print gripper.open(block=False)
+        print(gripper.open(block=False))
         rospy.sleep(0.11)
         gripper.stop()
-        print gripper.close(block=False)
+        print(gripper.close(block=False))
         rospy.sleep(0.1)
         gripper.stop()
 
diff --git a/robotiq_modbus_rtu/src/robotiq_modbus_rtu/comModbusRtu.py b/robotiq_modbus_rtu/src/robotiq_modbus_rtu/comModbusRtu.py
index d468a5d..0837e71 100644
--- a/robotiq_modbus_rtu/src/robotiq_modbus_rtu/comModbusRtu.py
+++ b/robotiq_modbus_rtu/src/robotiq_modbus_rtu/comModbusRtu.py
@@ -44,6 +44,7 @@ The module depends on pymodbus (http://code.google.com/p/pymodbus/) for the Modb
 """
 
 from pymodbus.client.sync import ModbusSerialClient
+from pymodbus.exceptions import ModbusIOException
 from math import ceil
 
 class communication:	
@@ -55,7 +56,7 @@ class communication:
       """Connection to the client - the method takes the IP address (as a string, e.g. '192.168.1.11') as an argument."""
       self.client = ModbusSerialClient(method='rtu',port=device,stopbits=1, bytesize=8, baudrate=115200, timeout=0.2)
       if not self.client.connect():
-          print "Unable to connect to %s" % device
+          print("Unable to connect to %s" % device)
           return False
       return True
 
@@ -64,6 +65,7 @@ class communication:
       self.client.close()
 
    def sendCommand(self, data):   
+      # print(f'comModbusRtu-sendCommand: {data} {len(data)/2}')
       """Send a command to the Gripper - the method takes a list of uint8 as an argument. The meaning of each variable depends on the Gripper model (see support.robotiq.com for more details)"""
       #make sure data has an even number of elements   
       if(len(data) % 2 == 1):
@@ -73,7 +75,7 @@ class communication:
       message = []
 
       #Fill message by combining two bytes in one register
-      for i in range(0, len(data)/2):
+      for i in range(0, int(len(data)/2)):
          message.append((data[2*i] << 8) + data[2*i+1])
 
       #To do!: Implement try/except 
@@ -86,6 +88,9 @@ class communication:
       #To do!: Implement try/except 
       #Get status from the device
       response = self.client.read_holding_registers(0x07D0, numRegs, unit=0x0009)
+      # if type(response) is ModbusIOException:
+      #   print("getStatus %s" % response)
+      #   return []
 
       #Instantiate output as an empty list
       output = []
